import concurrent.futures
import multiprocessing
import os
import platform
import shutil
import subprocess
import sys
import tarfile
import urllib.request
import zipfile
from io import BytesIO

from PySide6.QtCore import (QCoreApplication, QByteArray, QMetaObject, QRect,
                            QSize, Qt)
from PySide6.QtGui import (QFont, QIcon,
                           QImage, QPixmap)
from PySide6.QtWidgets import (QApplication, QMainWindow, QLabel, QLineEdit, QProgressBar,
                               QPushButton, QSizePolicy, QFileIconProvider, QFileDialog)

DragPath = ['']
DragPath2 = ['']

class nightcore(object):
    def __init__(self, filename, ffmpeg_check):
        self.filename = filename
        self.ffmpeg_check = ffmpeg_check

    def create(self):
        if not self.ffmpeg_check:
            if self.filename.split('.')[-1].lower() == 'm4a':
                subprocess.run('{} -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), self.filename, self.filename.replace('.m4a', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'mp3':
                subprocess.run('{} -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), self.filename, self.filename.replace('.mp3', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'flac':
                subprocess.run('{} -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), self.filename, self.filename.replace('.flac', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'wav':
                subprocess.run('{} -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), self.filename, self.filename.replace('.wav', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
        else:
            if self.filename.split('.')[-1].lower() == 'm4a':
                subprocess.run('ffmpeg -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(self.filename, self.filename.replace('.m4a', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'mp3':
                subprocess.run('ffmpeg -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(self.filename, self.filename.replace('.mp3', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'flac':
                subprocess.run('ffmpeg -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(self.filename, self.filename.replace('.flac', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass
            if self.filename.split('.')[-1].lower() == 'wav':
                subprocess.run('ffmpeg -i "{}" -map_metadata -1 -af asetrate=44100*120/100,atempo=1.0083 -vn -acodec aac "{} (nightcore).m4a"'.format(self.filename, self.filename.replace('.wav', '')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                try:
                    os.remove(self.filename)
                except:
                    pass


class dragQLineEdit(QLineEdit):
    def __init__(self, parent=None):
        super(dragQLineEdit, self).__init__(parent)
        self.setPlaceholderText('Input Folder')

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
            event.setAccepted(True)
            self.setText(str(event.mimeData().urls()[0].toLocalFile()))
            DragPath[0] = str(event.mimeData().urls()[0].toLocalFile())
        else:
            event.ignore()

class dragQLineEdit2(QLineEdit):
    def __init__(self, parent=None):
        super(dragQLineEdit2, self).__init__(parent)
        self.setPlaceholderText('Output Folder')

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
            event.setAccepted(True)
            self.setText(str(event.mimeData().urls()[0].toLocalFile()))
            DragPath2[0] = str(event.mimeData().urls()[0].toLocalFile())
        else:
            event.ignore()

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setAcceptDrops(True)
        self.setWindowIcon(QIcon(QPixmap(QSize(512, 512)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))

class Ui_NightcoreCreater(object):
    def setupUi(self, NightcoreCreater):
        if not NightcoreCreater.objectName():
            NightcoreCreater.setObjectName("NightcoreCreater")
        NightcoreCreater.resize(1102, 348)
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(NightcoreCreater.sizePolicy().hasHeightForWidth())
        NightcoreCreater.setSizePolicy(sizePolicy)
        font = QFont()
        font.setFamilies(["Arial"])
        font.setPointSize(20)
        NightcoreCreater.setFont(font)
        NightcoreCreater.setAcceptDrops(True)
        NightcoreCreater.setStyleSheet("QWidget{color: White;background: #131519}")
        self.FileCompleteProgressBar = QProgressBar(NightcoreCreater)
        self.FileCompleteProgressBar.setObjectName("FileCompleteProgressBar")
        self.FileCompleteProgressBar.setGeometry(QRect(10, 290, 1081, 51))
        font1 = QFont()
        font1.setFamilies(["Arial"])
        font1.setPointSize(10)
        self.FileCompleteProgressBar.setFont(font1)
        self.FileCompleteProgressBar.setStyleSheet("QProgressBar{color: White;background: #131519;}")
        self.FileCompleteProgressBar.setValue(0)
        self.FileCompleteProgressBar.setTextVisible(False)
        self.Input = dragQLineEdit(NightcoreCreater)
        self.Input.setObjectName("Input")
        self.Input.setGeometry(QRect(10, 220, 411, 41))
        sizePolicy.setHeightForWidth(self.Input.sizePolicy().hasHeightForWidth())
        self.Input.setSizePolicy(sizePolicy)
        self.Input.setFont(font)
        self.Input.setStyleSheet("QLineEdit{color: White;background: #131519;border: 2px solid red;}\n"
                                 "")
        self.Input.setFrame(False)
        self.Output = dragQLineEdit2(NightcoreCreater)
        self.Output.setObjectName("Output")
        self.Output.setGeometry(QRect(520, 220, 411, 41))
        sizePolicy.setHeightForWidth(self.Output.sizePolicy().hasHeightForWidth())
        self.Output.setSizePolicy(sizePolicy)
        self.Output.setFont(font)
        self.Output.setStyleSheet("QLineEdit{color: White;background: #131519;border: 2px solid red;}")
        self.Output.setFrame(False)
        self.OpenFolder = QPushButton(NightcoreCreater)
        self.OpenFolder.setObjectName("OpenFolder")
        self.OpenFolder.setIcon(QFileIconProvider().icon(QFileIconProvider.Folder).pixmap(QSize(32, 32)))
        self.OpenFolder.setGeometry(QRect(430, 220, 41, 41))
        sizePolicy.setHeightForWidth(self.OpenFolder.sizePolicy().hasHeightForWidth())
        self.OpenFolder.setSizePolicy(sizePolicy)
        font2 = QFont()
        font2.setFamilies(["Arial"])
        font2.setPointSize(30)
        self.OpenFolder.setFont(font2)
        self.OpenFolder.setStyleSheet("QPushButton{color: #131519;background: #3d3d3d;}")
        self.OpenFolder.setIconSize(QSize(128, 128))
        self.OpenFolder.clicked.connect(self.InputFolders)
        self.OutputFolder = QPushButton(NightcoreCreater)
        self.OutputFolder.setObjectName("OutputFolder")
        self.OutputFolder.setIcon(QFileIconProvider().icon(QFileIconProvider.Folder).pixmap(QSize(32, 32)))
        self.OutputFolder.setGeometry(QRect(941, 220, 41, 41))
        sizePolicy.setHeightForWidth(self.OutputFolder.sizePolicy().hasHeightForWidth())
        self.OutputFolder.setSizePolicy(sizePolicy)
        self.OutputFolder.setFont(font2)
        self.OutputFolder.setStyleSheet("QPushButton{color: #131519;background-color: #3d3d3d;}")
        self.OutputFolder.setIconSize(QSize(128, 128))
        self.OutputFolder.clicked.connect(self.OutputFolders)
        self.StartButton = QPushButton(NightcoreCreater)
        self.StartButton.setObjectName("StartButton")
        self.StartButton.setGeometry(QRect(640, 90, 381, 81))
        sizePolicy.setHeightForWidth(self.StartButton.sizePolicy().hasHeightForWidth())
        self.StartButton.setSizePolicy(sizePolicy)
        self.StartButton.clicked.connect(self.convertClicked)
        font3 = QFont()
        font3.setFamilies(["Arial"])
        font3.setPointSize(33)
        self.StartButton.setFont(font3)
        self.StartButton.setStyleSheet("QPushButton{color: #131519;background: White;}\n"
                                       "QPushButton:checked {background: #2b2b2b; color: White;}")
        self.StartButton.setCheckable(True)
        self.StartButton.setFlat(False)
        self.Title = QLabel(NightcoreCreater)
        self.Title.setObjectName("Title")
        self.Title.setGeometry(QRect(200, 60, 361, 101))
        self.Title.setFont(font2)
        self.Title.setStyleSheet("QLabel{color: Red;background: #131519}")
        self.Title.setAlignment(Qt.AlignCenter)
        self.Icon = QLabel(NightcoreCreater)
        self.Icon.setObjectName("Icon")
        self.Icon.setGeometry(QRect(60, 50, 125, 125))
        self.Icon.setStyleSheet("QLabel{border: 2px solid red;}")
        self.Icon.setPixmap(QPixmap(QSize(64, 64)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))
        self.StartButton.setDefault(False)
        self.is_conv_ok = True
        self.InputFolderPath = ''
        self.OutputFolderPath = ''
        self.ffmpeg_check_ok = False
        self.retranslateUi(NightcoreCreater)

        self.StartButton.setDefault(False)

        QMetaObject.connectSlotsByName(NightcoreCreater)

    def findAudioFile(self, path):
        for root, dirs, file in os.walk(path):
            yield root
            for f in file:
                yield os.path.join(root, f)

    def detect_totalfiles(self, path):
        TFiles = []
        for r, d, file in os.walk(path):
            for f in file:
                TFiles.append(f)
        return len(TFiles)

    def InputFolders(self, c):
        self.InputFolderPath = QFileDialog.getExistingDirectory(parent=None, caption='Select Input Folder', dir='.')
        if self.InputFolderPath == '':
            self.InputFolderPath = os.path.expanduser('~').replace(os.sep, '/')
        self.Input.setText(self.InputFolderPath)

    def OutputFolders(self, c):
        self.OutputFolderPath = QFileDialog.getExistingDirectory(parent=None, caption='Select Output Folder', dir=os.path.expanduser('~'))
        if self.OutputFolderPath == '':
            self.OutputFolderPath = os.path.expanduser('~').replace(os.sep, '/')
        self.Output.setText(self.OutputFolderPath)

    def ConvertPause(self):
        self.is_conv_ok = False
        self.StartButton.setText('Start')

    def ConvertStart(self):
        self.StartButton.setText('Stop')
        check_ffmpeg = subprocess.Popen('ffmpeg -hide_banner -version', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[1].decode(errors='ignore')
        if not check_ffmpeg == '':
            check_ffmpeg2 = subprocess.Popen('{} -hide_banner -version'.format(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg')), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[1].decode(errors='ignore')
            if not check_ffmpeg2 == '':
                if platform.system() == 'Windows':
                    os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'), exist_ok=True)
                    back_path = os.getcwd()
                    os.chdir(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                    win_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-win64-gpl.zip', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                    with zipfile.ZipFile(BytesIO(win_ffmpeg)) as ffmpegzip:
                        ffmpegzip.extractall(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp') + '/.')
                    shutil.move(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp', 'ffmpeg-master-latest-win64-gpl', 'bin'), os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'))
                    os.chdir(back_path)
                    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                if platform.system() == 'Linux':
                    os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'), exist_ok=True)
                    back_path = os.getcwd()
                    os.chdir(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                    linux_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://github.com/BtbN/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-linux64-gpl.tar.xz', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                    with open('tmp.tar.xz', 'wb') as f:
                        f.write(linux_ffmpeg)
                    os.remove('tmp.tar.xz')
                    with tarfile.open('tmp.tar.xz', 'r:xz') as ffmpegzip:
                        ffmpegzip.extractall(path=os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp') + '/.')
                    shutil.move(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp', 'ffmpeg-master-latest-linux64-gpl', 'bin'), os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'))
                    os.chdir(back_path)
                    shutil.rmtree(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'tmp'))
                    os.chmod(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), 0o755)
                if platform.system() == 'Darwin':
                    if not platform.machine() == 'arm64':
                        os.makedirs(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin'), exist_ok=True)
                        darwin_ffmpeg = urllib.request.urlopen(urllib.request.Request('https://evermeet.cx/ffmpeg/ffmpeg-5.1.2.zip', headers={'User-Agent': 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'})).read()
                        with zipfile.ZipFile(BytesIO(darwin_ffmpeg)) as ffmpegzip:
                            ffmpegzip.extractall(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin') + '/.')
                        os.chmod(os.path.join(os.path.expanduser('~'), 'ffmupimg', 'bin', 'ffmpeg'), 0o755)
                    else:
                        try:
                            check_darwin_ffmpeg = subprocess.Popen('brew install ffmpeg', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[1].decode(errors='ignore')
                        except:
                            check_darwin_ffmpeg = '1'
                        if not check_darwin_ffmpeg == '':
                            sys.exit(1)
                        self.ffmpeg_check_ok = True
        else:
            self.ffmpeg_check_ok = True
        concurrent.futures.ThreadPoolExecutor(os.cpu_count() * 50).submit(self.ffconvert_main)

    def ffconvert_main(self):
        self.FileCompleteProgressBar.setValue(0)
        if self.InputFolderPath == '':
            self.InputFolderPath = DragPath[0]
        if self.OutputFolderPath == '':
            self.OutputFolderPath = DragPath2[0]
        if not self.InputFolderPath == '':
            if not self.OutputFolderPath == '':
                outputdir_name = '{} (nightcore)'.format(self.InputFolderPath.split('/')[-1])
                try:
                    shutil.copytree(self.InputFolderPath, os.path.join(self.OutputFolderPath, outputdir_name))
                except:
                    pass
                back_path = os.getcwd()
                os.chdir(os.path.join(self.OutputFolderPath, outputdir_name))
                for f in os.listdir():
                    shutil.move(f, self.OutputFolderPath)
                os.chdir(self.OutputFolderPath)
                shutil.rmtree(os.path.join(self.OutputFolderPath, outputdir_name))
                workpath = os.getcwd()
                self.TotalFiles = self.detect_totalfiles(workpath)
                NCProcessList = []
                for file1 in self.findAudioFile(self.OutputFolderPath):
                    file1 = file1.replace(os.sep, '/')
                    if self.is_conv_ok:
                        if os.path.exists(os.path.dirname(file1)):
                            os.chdir(os.path.dirname(file1))
                        else:
                            os.chdir(os.path.dirname(os.path.abspath(file1)))
                        if not '(nightcore)' in file1.split('/')[-1:][0]:
                            NC = nightcore(file1.split('/')[-1], self.ffmpeg_check_ok)
                            NCProcess = multiprocessing.Process(target=NC.create, daemon=True)
                            NCProcess.start()
                            NCProcessList.append(NCProcess)
                        os.chdir(workpath)
                    else:
                        break
                for c, p in enumerate(NCProcessList):
                    p.join()
                    p.terminate()
                    self.FileCompleteProgressBar.setValue(min((c / self.TotalFiles) * 100.0, 100.0))
                os.chdir(back_path)
                self.StartButton.setChecked(False)
                self.StartButton.setText('Start')
                self.FileCompleteProgressBar.setValue(0)

    def convertClicked(self, c):
        if self.StartButton.isChecked():
            self.ConvertStart()
        else:
            self.ConvertPause()

    def retranslateUi(self, NightcoreCreater):
        NightcoreCreater.setWindowTitle(QCoreApplication.translate("NightcoreCreater", "Nightcore Creater", None))
        self.StartButton.setText(QCoreApplication.translate("NightcoreCreater", "Start", None))
        self.Title.setText(QCoreApplication.translate("NightcoreCreater", "Nightcore Creater", None))
        self.Icon.setText("")

def main():
    app = QApplication(sys.argv)
    main_win = MainWindow()
    ui = Ui_NightcoreCreater()
    ui.setupUi(main_win)
    main_win.setFixedSize(main_win.size())
    main_win.setWindowFlags(Qt.WindowStaysOnTopHint)
    main_win.show()
    app.exec()

if __name__ == '__main__':
    if platform.system() == 'Linux':
        multiprocessing.set_start_method('fork')
    else:
        multiprocessing.set_start_method('spawn')
    main()